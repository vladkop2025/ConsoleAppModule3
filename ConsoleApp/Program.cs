using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp
{
    internal class Program
    {
        static void Main(string[] args)
        {
            //3.6. Основные операции C#
            string MyName = "Jane";
            byte MyAge = 27;
            bool HaveIApet = true;
            double MyShoeSize = 37.5;

            Console.WriteLine("My name is " + MyName);
            Console.WriteLine("MyAge " + MyAge);
            Console.WriteLine("Do I have a pet? " + HaveIApet);
            Console.WriteLine("My shoe size is " + MyShoeSize);

            Console.WriteLine("IntMin {0} ", int.MinValue);
            Console.WriteLine("IntMax {0} ", int.MaxValue);

            DaysOfWeek MyFavoriteDay;
            MyFavoriteDay = DaysOfWeek.Friday;
            Console.WriteLine(MyFavoriteDay);

            //команда, которую мы используем для того, чтобы консоль не закрывалась.
            Console.ReadKey();

            //код, который отображает на экран литерал "Привет, мир!" с отступом от края и переносом строки после запятой
            Console.WriteLine("\t Привет, \n мир!");

            //Перед строкой необходимо указать знак $, а переменную, которую хотим отобразить в строке, нужно заключить в фигурные скобки.
            string MyName1 = "Евгения";
            Console.WriteLine("Привет, Мир");
            Console.WriteLine();
            Console.WriteLine($"Меня зовут {MyName1}");

            //код для вывода на экран "Мой возраст" и переменной age через символ $
            //Это также позволяет вывести в одной строке много переменных
            int Age = 65;
            Console.WriteLine($"Мой возраст {Age}");

            //Напишите код для вывода на экран трёх переменных: name, age, favcolor через перенос строки с помощью индексов {0}, {1}, {2}.
            string name = "Иван";
            int age = 25;
            string favcolor = "синий";
            Console.WriteLine("Имя: {0}\nВозраст: {1}\nЛюбимый цвет: {2}", name, age, favcolor);

            //Console.ReadLine() — именно она позволяет компьютеру строить диалог с вами и обрабатывать полученные данные

            //код, который позволит прочитать строку: "Цыган на цыпочках цыпленку цыкнул цыц" в переменную str, введенную с клавиатуры.
            //При этом вам также необходимо указать тип данных для переменной str
            string str = Console.ReadLine();

            //Основные операции C# 
            //double result = 5 / 2;
            double result = 5.0 / 2.0;  //делаем литералы (5 и 2) вещественными
            Console.WriteLine("5 / 2 = {0}", result);

            //унарные операции - работают только с операциями + и –
            //++Инкремент.Увеличение значения переменной на 1
            //––	Декремент. Уменьшение значения переменной на 1
            int counter = 10;
            Console.WriteLine("Value: {0} Increment: {1}", counter, ++counter); //результат 11
            //Операции инкремент и декремент могут использоваться в качестве префиксных и постфиксных

            //постфиксная операция - В постфиксной же мы сначала возвращаем значение, а потом увеличиваем его на 1
            Console.WriteLine("Value: {0} Increment: {1}", counter, counter++); //результат 11

            /* приоритет операция
            Инкремент, декремент.
            Умножение, деление, получение остатка.
            Сложение, вычитание. 
            */
            double result1 = 10.0 * 2.0 / 5.0;
            Console.WriteLine("Value: {0}", result1); //результат 4

            double result2 = 5.0 * 3.0 / 2.0;
            Console.WriteLine("Value: {0}", result2); //результат 

            //Запишите 5 делить на 2 умножить на 3 в переменную result типа double
            double result3 = 5.0 / 2.0 * 3.0;
            Console.WriteLine("Value: {0}", result3); //результат 

            /*операции присвоения - по факту это просто краткая запись (check += 670 эквивалентна  check = check + 670)
            +=	Операция присваивания после сложения
            –=	Операция присваивания после вычитания
            *=	Операция присваивания после умножения
            /=	Операция присваивания после деления
            %=	Операция присваивания после остатка от делени            
            */

            /*логические операции
            Мы рассмотрим всего две операции: логическое И и логическое ИЛИ c точки зрения работы с разрядами чисел
            Операция логического И — логическое умножение. Обозначается как &
                Умножение производится поразрядно и, если у обоих операндов значения разрядов равно 1, то операция возвращает 1, иначе возвращается число 0
                То есть, если смотреть на цифры 5 и 4 в int, проверяем их представление в разрядном формате: 4 будет равно 100, а 5 — 101.
                Перемножаем по рядам: (1*1, 0*0, 0 *1) = 100, то есть снова число 4
                Для логических переменных все гораздо проще: если оба операнда равны true, то и возвращается true
            Операция ИЛИ — логическое сложение, выглядит как |
                Все операции происходят аналогично умножению, только принцип работы другой — поразрядно мы складываем.
                Для логических операций, если хотя бы одно значение равно true, то результат будет true.
            Также есть операции присваивания с этими операторами: &= и |=
            Есть некоторые другие: логическое вычитание, логическое отрицание (инверсия), сдвиг разрядов - позднее расмотрим
            */

            //Давайте сложим самое большое число для byte и самое маленькое для int.Как это правильно сделать ?
            //Минимальное значение int — отрицальное, и это число не помещается в byte
            int res = byte.MaxValue + int.MinValue;
            Console.WriteLine(res);

            //В данном коде вместо знака? введите символ, обозначающий остаток от деления
            double result4 = 10 % 3;
            Console.WriteLine(result4); //результат 1
        }
    }
}
enum DaysOfWeek : byte
{
    Tuesday,
    Monday,
    Wednesday,
    Friday
}

enum Semafore : int
{
    Red = 100,
    Yellow = 200,
    Green = 300
}